const express = require("express");
const router = express.Router();
const User = require("../models/User");
const Cart = require("../models/Cart");
const Wishlist = require("../models/Wishlist");
const Address = require('../models/Address');
const multer = require("multer");

// C·∫•u h√¨nh l∆∞u file ·∫£nh
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '../uploads/avatars'));
  },
  filename: (req, file, cb) => {
    const uniqueName = Date.now() + path.extname(file.originalname);
    cb(null, uniqueName);
  }
});

const upload = multer({ storage });

// PUT update user
router.put('/:id', async (req, res) => {
  try {
    const id = req.params.id;

    const existingUser = await User.findById(id);
    if (!existingUser) {
      return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
    }

    const { name, email, phone, address, avatar } = req.body;

    if (name) existingUser.name = name;
    if (email) existingUser.email = email;
    if (phone) existingUser.phone = phone;
    if (address) existingUser.address = address;

    if (avatar) {
      existingUser.avatar = avatar;
    }

    const updatedUser = await existingUser.save();
    res.json(updatedUser);
  } catch (err) {
    console.error("‚ùå L·ªói update user:", err);
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t user' });
  }
});

// ƒë·ªïi m·∫≠t kh·∫©u 
router.post('/:id/change-password', async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;
    const userId = req.params.id;

    if (!oldPassword || !newPassword) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u c≈© v√† m·ªõi" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    if (user.password !== oldPassword) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword; // TODO: hash n·∫øu c·∫ßn
    await user.save();

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
    res.status(500).json({ message: "L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u" });
  }
});

// L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng, lo·∫°i tr·ª´ admin
router.get("/", async (req, res) => {
  try {
    // L·ªçc role kh√°c "admin"
    const users = await User.find({ role: { $ne: "admin" } });
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });
  }
});

// L·∫•y ng∆∞·ªùi d√πng theo ID
router.get("/:id", async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    res.json(user);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y ng∆∞·ªùi d√πng" });
  }
});

// ƒêƒÉng nh·∫≠p (th√™m check n·∫øu role === 'locked' th√¨ kh√¥ng cho ƒëƒÉng nh·∫≠p)
router.post("/login", async (req, res) => {
  console.log("üî• Y√™u c·∫ßu login nh·∫≠n ƒë∆∞·ª£c:", req.body);
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u" });
    }

    const user = await User.findOne({ email });

    if (!user) {
      console.warn("‚ö†Ô∏è ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: kh√¥ng t√¨m th·∫•y email", email);
      return res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
    if (user.role === "locked") {
      return res.status(403).json({ message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n." });
    }

    if (user.password !== password) {
      console.warn("‚ö†Ô∏è ƒêƒÉng nh·∫≠p th·∫•t b·∫°i cho email:", email);
      return res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      address: user.address,
      avatar: user.avatar,
      role: user.role,
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
  }
});

// ƒêƒÉng k√Ω t√†i kho·∫£n
router.post("/register", async (req, res) => {
  console.log("üî• Y√™u c·∫ßu register nh·∫≠n ƒë∆∞·ª£c:", req.body);
  try {
    const { name, email, phone, password, avatar, address } = req.body; 

    if (!name || !email || !password) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    // 1. T·∫°o user
    const newUser = new User({
      name,
      email,
      phone,
      password,
      avatar,
      address,
      role: "user",
    });
    const savedUser = await newUser.save();

    // 2. T·∫°o Cart ri√™ng cho user
    const newCart = new Cart({ userId: savedUser._id.toString(), items: [] });
    await newCart.save();

    // 3. T·∫°o Wishlist ri√™ng cho user
    const newWishlist = new Wishlist({ userId: savedUser._id.toString(), items: [] });
    await newWishlist.save();

    // 4. T·∫°o ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
    const newAddress = new Address({
      userId: savedUser._id,
      name: savedUser.name,
      address: savedUser.address || "Ch∆∞a c√≥ ƒë·ªãa ch·ªâ",
      phone: savedUser.phone || "Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i",
    });
    await newAddress.save();

    // 5. Tr·∫£ v·ªÅ th√¥ng tin user
    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
      user: {
        _id: savedUser._id,
        name: savedUser.name,
        email: savedUser.email,
        phone: savedUser.phone,
        address: savedUser.address,
        avatar: savedUser.avatar,
        role: savedUser.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err);
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω" });
  }
});

// C·∫≠p nh·∫≠t role cho user theo id (v√≠ d·ª• chuy·ªÉn sang 'locked' ƒë·ªÉ kh√≥a t√†i kho·∫£n)
router.patch("/:id/role", async (req, res) => {
  try {
    const { role } = req.body;

    const validRoles = ["user", "admin", "locked"];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ message: "Role kh√¥ng h·ª£p l·ªá" });
    }

    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      { role },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
      user: {
        _id: updatedUser._id,
        name: updatedUser.name,
        email: updatedUser.email,
        role: updatedUser.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t role:", err);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t role" });
  }
});


module.exports = router;

